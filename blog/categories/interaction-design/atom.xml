<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Interaction-design | Marek Lewandowski]]></title>
  <link href="http://mklew.github.io/blog/categories/interaction-design/atom.xml" rel="self"/>
  <link href="http://mklew.github.io/"/>
  <updated>2014-08-09T15:52:45+02:00</updated>
  <id>http://mklew.github.io/</id>
  <author>
    <name><![CDATA[Marek Lewandowski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Internationalization]]></title>
    <link href="http://mklew.github.io/blog/2014/06/01/internationalization/"/>
    <updated>2014-06-01T22:20:02+02:00</updated>
    <id>http://mklew.github.io/blog/2014/06/01/internationalization</id>
    <content type="html"><![CDATA[<h1>Ramble on Internalization</h1>

<p>Internalization is a tricky subject. It requires quite a lot of work to prepare product to be fully internalizationable. Translating text is the easiest part of the internalization process. Conforming to cultural norms is a tricky part. Unfortunately I have no prior experience with developing products available for example in arabic or asian countries but this seems like interesting challenge. Even though I haven&rsquo;t done it I can notice that it requires a lot of work to test user interfaces across different languagues and keep them consistent. Having a graphic theme also may not be trivial task. But it&rsquo;s not all about presentation. Having appropriate domain model which takes into account for example currency is important as well. That&rsquo;s why it is important to think about these cases even though product is not going to be available worldwide at first. Otherwise adding dollars to yens might yield interesting results.</p>

<h2>I18n in estimation</h2>

<p>Internationalization is one of these things that I completely forgot when I try to give an estimation of time for particular task. It so happens that doing i18n is very tedious job which adds a lot of time for rest of the development time. During last project we left i18n as the last thing to do. I don&rsquo;t know if that was a good choice because it requires a lot of time to go through every screen and translate all the labels. It&rsquo;s also quite error prone. However when it can be done by less people and there are higher chances that key codes for labels are more consistent.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interaction Design in Mobile Devices]]></title>
    <link href="http://mklew.github.io/blog/2014/05/18/interaction-design-in-mobile-devices/"/>
    <updated>2014-05-18T14:35:44+02:00</updated>
    <id>http://mklew.github.io/blog/2014/05/18/interaction-design-in-mobile-devices</id>
    <content type="html"><![CDATA[<h2>3 Approaches to design</h2>

<p>There are 3 approaches to interaction design in mobile devices.</p>

<ol>
<li>Platform dependent design</li>
<li>Own Cross-platform design</li>
<li>Adapted Cross-Platform design</li>
</ol>


<p>Each approach has its merits and some of them might be even better in particular case of application.
For example Own Cross-platform design might be suitable for game like application. Game does not require typical navigation, action bars and other GUI elements typical for a platform. Usually games offer neat looking menu in game&rsquo;s theme so player can have immerse himself in a game&rsquo;s world.</p>

<p>In the other case when application is more typical it&rsquo;s better to go with platform dependent design because it offers similar experience that users already know. Such app feels natural to the users and can leverage components and interaction methods available only in one platform. The downside of that approach is that it is costly because then developers need to develop at least 2 platform specific applications which at most can share only the backend services.</p>

<p>If one decide to follow first approach then it is important to stick to the style guides of the platforms.</p>

<h2>Style guides </h2>

<p>Style guides are documents which contain pointers and sometimes requirements for interaction design of application. Requirements might include using elements for its intended purposes or using specific element in a given scenario.</p>

<p>Both major platforms Android and iOS have their style guides. Check them if you would like to know more
<a href="https://developer.android.com/design/index.html" title="Android styleguide">Android style guide</a> and <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/index.html" title="iOS styleguide">iOS style guide</a>. Some time ago Android didn&rsquo;t really have a style guide. Now we see a positive change with clearly defined vision of the interaction with the mobile device. Both style guides go in depth about the gui elements and their intended purposes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10 Usability Heuristics for User Interface Design]]></title>
    <link href="http://mklew.github.io/blog/2014/05/11/10-usability-heuristics-for-user-interface-design/"/>
    <updated>2014-05-11T14:17:23+02:00</updated>
    <id>http://mklew.github.io/blog/2014/05/11/10-usability-heuristics-for-user-interface-design</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s discuss <a href="http://www.nngroup.com/articles/ten-usability-heuristics/" title="Guidelines">Jakob Nielsen&rsquo;s 10 usability heuristics</a>. When you read these guidelines you probably nod and think &ldquo;<em>yes, that&rsquo;s right</em>&rdquo;, but the problem is with execution because there are no concrete examples and correct solutions for them. I will try an example which illustrates that guideline is really about. Most of examples are from my experience while working on the enterprise application. I&rsquo;ve spotted similar problems before I have heard about Nielsen&rsquo;s heuristics so you probably might be already familiar with them even if you don&rsquo;t know them.</p>

<h2>1. Visibility of system status</h2>

<p><em>The system should always keep users informed about what is going on, through appropriate feedback within reasonable time.</em></p>

<p>Imagine a form with a button at the end. Once you&rsquo;ve filled all fields in the form you click the save button and</p>

<p>&hellip; nothing happens.</p>

<p>&hellip; you are redirected to some other page in the system.</p>

<p>&hellip; save button disappears and Ok button shows up.</p>

<p>You might have seen systems like this before. Each share the same problem. System status, concretely status of the operation is not shown. It would be much better if user sees notification message about successful operation. If action takes time then immediately after save button has been clicked some kind of <em>in progress bar</em> should be shown. These little things communicate to user that something actually is happening.</p>

<p>I had countless of situation where I was unsure whether I clicked the button or not. Then I clicked it again and after a while I could get an error because of <em>operation in progress</em>. Sounds familiar?</p>

<p>In short: React to user actions, show notifications upon success and error, show progress bars for time-consuming actions.</p>

<h2>2. Match between system and the real world</h2>

<p><em>The system should speak the users' language, with words, phrases and concepts familiar to the user, rather than system-oriented terms. Follow real-world conventions, making information appear in a natural and logical order.</em></p>

<p>I would argue here and take this guildeline further. I would say that system should be oriented in real-world nomenclature so that interface and real-world convetions are natural consequence of whole approach to product development.</p>

<p>However to give an example. Let&rsquo;s say that form from previous example was for opening a bank account. Let&rsquo;s say that operation failed and we do see notification.</p>

<p>Instead of notification with generic message <em>Operation has failed</em> it&rsquo;s much better to see <em>We couldn&rsquo;t process your account opening request because &hellip;</em></p>

<p>Giving the reason of the failure is not the point in this case, but using a words of the domain is.</p>

<h2>3. User control and freedom</h2>

<p><em>Users often choose system functions by mistake and will need a clearly marked &ldquo;emergency exit&rdquo; to leave the unwanted state without having to go through an extended dialogue. Support undo and redo.</em></p>

<p>This guideline acutally says exactly what we should do. However <em>Undo</em> and <em>Redo</em> is not always a valid options. Having a <em>Cancel</em> everywhere is a good idea. Closing modal windows with <em>Escape</em> key also. As well as with usual close icon. In the last system I&rsquo;ve been working on modals could be discarded in every way mentioned. User should be familar with majority of them.</p>

<h2>4. Consistency and standards</h2>

<p><em>Users should not have to wonder whether different words, situations, or actions mean the same thing. Follow platform conventions</em></p>

<p>This is very important guideline which can be breached easily when there are no clear standards and there are many developers implementing the system. The simplest example is the name of the save button. Is <em>Add</em> the same as <em>Save</em>? These inconsistencies were a commonly reported errors.</p>

<p>Placement is very important as well. If you have different actions on one page and similar set of actions on other page but in different order and/or different location relative to the content then user might be confused.</p>

<h2>5. Error prevention</h2>

<p><em>Even better than good error messages is a careful design which prevents a problem from occurring in the first place. Either eliminate error-prone conditions or check for them and present users with a confirmation option before they commit to the action.</em></p>

<p>Very good example is form validation. Obviosuly you need to check data at the backend so you already have one validation there. One might start questioning validation done at form level, but it greatly increases usability and decreases amount of errors user can see. Validating dynamically each form field is a right way to go. Once a user finishes with one field it should be validated and marked as valid or invalid (remember first rule?). If it&rsquo;s invalid then message should be shown. Even better message with correct example.</p>

<h2>6. Recognition rather than recall</h2>

<p><em>Minimize the user&rsquo;s memory load by making objects, actions, and options visible. The user should not have to remember information from one part of the dialogue to another. Instructions for use of the system should be visible or easily retrievable whenever appropriate.</em></p>

<p>I haven&rsquo;t run into issues with the first part. It is a common sense to make a information visible if it is required to proceed later. I can however give a practical advice on the instructions.</p>

<p>Following standard conventions it might a good idea to put a small icon symbolising help for example question mark which when hovered displays instructions about how to proceed further. It is particularly good because instructions are then focused on the problem, they are always close to origin of the problem. Also the fact that they are hidden until needed is also good because otherwise user could be overwhelmed of information.</p>

<h2>7. Flexibility and efficiency of use</h2>

<p><em>Accelerators &mdash; unseen by the novice user &mdash; may often speed up the interaction for the expert user such that the system can cater to both inexperienced and experienced users. Allow users to tailor frequent actions.</em></p>

<p>I had no previous experience with that one. It is definitely a good idea. Shortcuts to everything is the reason I love IntellJ so much. However there is no easy way to help novice user advance on higher level. They must want to do that by themselves and so they will look at documentation for shortcuts.</p>

<p>In my point of view, this guideline is like a cherry on top. There are more urgent issuses to deal with first. Making navigation faster is a easy when there is a good navigation in the first place.</p>

<h2>8. Aesthetic and minimalist design</h2>

<p><em>Dialogues should not contain information which is irrelevant or rarely needed. Every extra unit of information in a dialogue competes with the relevant units of information and diminishes their relative visibility.</em></p>

<p>Nightmare of every enterprise application. How to cut down on all this required information? If user needs to fill 100 fields because business say so then there is no way around limiting these 100 fields. However there is a way of making it seems like less. Multipage forms are a good way to go. If we can divide these fields into related groups and in 99.99% it is possible then it is much better to ask user just for a bit of information and then advancing for the next step. Again it is important to remember about 1. and showing how many steps are ahead.</p>

<h2>9. Help users recognize, diagnose, and recover from errors</h2>

<p><em>Error messages should be expressed in plain language (no codes), precisely indicate the problem, and constructively suggest a solution.</em></p>

<p>I have already gave an example of this in 2. but then solution wasn&rsquo;t the point. Look at the difference between these two messages:</p>

<ol>
<li>You cannot order this item.</li>
<li>You cannot order this item because it is out of stock.</li>
</ol>


<p> What are your thoughts on the first? Mine are like &ldquo;<em>Why? Am I not good enough for you or what?</em>&rdquo;</p>

<p> Second is better however it can be even more better. What is missing? Suggestion for a solution. How about something like:</p>

<p> &ldquo;You cannot order this item because it is out of stock. Click here to be notified when item is back in stock&rdquo;.</p>

<p> Now you have it all.</p>

<h2>10. Help and documentation</h2>

<p><em>Even though it is better if the system can be used without documentation, it may be necessary to provide help and documentation. Any such information should be easy to search, focused on the user&rsquo;s task, list concrete steps to be carried out, and not be too large.</em></p>

<p>Writing a good documentation is a tough task and no one wants to do it. If it has to be done then it is done by the least experienced team member whos time is least expensive. That&rsquo;s the reason why most of the documentation really sucks.</p>

<p>Using contextual help like that from 6. might a good idea. In that way there is no one big documentation but there is always a contextual documentation in hands reach.</p>

<h1>Summary</h1>

<p>At this point I am pretty sure that you have run across at least one of these issues and you knew what you could do. Knowing these guidelines might make you more consious about the problems. There are very easy solutions to most of them. In most cases there are already open source frameworks and collections of other components which can be used. It just requires a little more effort. It is something like <em>Pareto rule</em> &ldquo;20% more effort gives 80% better usability&rdquo;. Even though it&rsquo;s not time consuming it is often something that it is done at the end when deadlines are already breached or close by and bug reports are already coming in so it might be hard to put that additional effort. At least that&rsquo;s from my experience.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflections on Detailed Interaction Design]]></title>
    <link href="http://mklew.github.io/blog/2014/03/26/reflections-on-detailed-interaction-design/"/>
    <updated>2014-03-26T12:23:23+01:00</updated>
    <id>http://mklew.github.io/blog/2014/03/26/reflections-on-detailed-interaction-design</id>
    <content type="html"><![CDATA[<h2>Navigation</h2>

<p>Apple desingers knew how important navigation is. Let&rsquo;s take iPod as an example. They came up with idea than favorite mp3 should not be more than 3 clicks away. So in just 3 clicks user is able to navigate through system to his/her favorite music. This is quite powerful feature and proof of importance of well designed navigation.</p>

<p>From my personal experience no effort at all is put into designing a navigation. Maybe because in case of business applications with lots of forms it is just minor concern. Navigation is just a product of grouping requirements together and interface mockups. Maybe projects I&rsquo;ve worked on had no budget and time for it. Whatever the answer is the navigation is there and maybe because it is accidentally fine it is not noticable.</p>

<p>It is surprising that good navigation can be achieved using really simple and really cheap techniques like <strong>card sorting</strong>.</p>

<p>Card sorting technique goes like this:</p>

<ol>
<li>Determine list of topics</li>
<li>Make cards</li>
<li>Select participants</li>
<li>Run session</li>
<li>Analyse groupings</li>
</ol>


<p>During the session participants have to rank cards according to their intuition. When finished, participants are asked to put labels on each group. Grouped topics show potential structure for the navigation.</p>

<p>The only tricky part about this technique is the requirement for the participants. They should be representative users. I think this technique could be used even without perfectly representative users internally in the company and still yield useful results or at least more useful than coincidental arrangement of topics.</p>

<h2>Product style guide</h2>

<p>Product style guide is the document compiling all the information
concerning a software product UI. It consists of information how elements like controls, dialogs, statuses, notifications and pretty much everything else should look like.</p>

<p>To me it seems like very useful document especially when I look at my past experience. Even though we had some design done by graphic still some of the missing parts like notifications differed between screens. Sometimes notification were at the top of the form, sometimes below. Sometimes action button was labeled just &ldquo;Save&rdquo; and sometimes &ldquo;Save changes&rdquo; even though it was used in same context. We had to spent some time fixing these inconsistencies. Having style guide would be much help. It would be good to know how to present list of things, how to present descriptions of items and many more.</p>

<p>I am sure that time spent developing product style guide would be less costly than time required for developers to fix minor incosistencies. Think about your product. It is surprising how much time you spend after all works but still does not look good enough. It takes a lot of time to make all UI sound when there are no clear guidelines or when they arrive really late after most of the work is already done. Having product style guide beforehand would reduce greatly simplify whole process and also decision making of developers.</p>

<p>Now that I am thinking about it over the time we arrived at implicit style guide. Mostly because some useful components like paginated lists with detailed view were developed and incorporated by the rest of the team members. It would be much better to have explicit document.</p>

<p>However there are some problems. Requirements are changing, sometimes it requires change to presentation of things. For example from radio button group to dual multiselection list. It is not pragmatic to develop style for every possible GUI element. Also not all elements are known. That means that development of product style guide should be iterative. It could start with some common base of elements when mockups are done and then it would require adjustments when new elements pop up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mental Models in a Product Design]]></title>
    <link href="http://mklew.github.io/blog/2014/03/02/about-design/"/>
    <updated>2014-03-02T14:30:26+01:00</updated>
    <id>http://mklew.github.io/blog/2014/03/02/about-design</id>
    <content type="html"><![CDATA[<p>You probably already have some mental model of this posts just by reading its title. You might think that you are going to read something about software design, good practices, patterns and such because you know that this is developer&rsquo;s blog. If you don&rsquo;t know what mental model is, don&rsquo;t worry, you will soon.</p>

<p>Today&rsquo;s post is about design of the whole product (whatever it may be) not just software stuff. Concretely I am going to discuss importance of mental and conceptual models in the design process. Let&rsquo;s start by getting on the same page with two definitions of design.</p>

<p><blockquote><p>[design is a] combination of aesthetics,<br/>economics, usability and manufacturability</p><footer><strong>Don Norman</strong> <cite>The Design of Everyday Things</cite></footer></blockquote></p>

<p><blockquote><p>Design is the creative process in which we<br/>use our intuition and analytical ability to<br/>understand the opportunities and<br/>constraints business goals, competitive<br/>markets, customer needs, and technologies<br/>present, then envision, communicate, and<br/>realize practical solutions that meet<br/>customer needs and create business value.</p><footer><strong>Pabini Gabriel-Petit</strong></footer></blockquote></p>

<p>During design phase desingers think of what product should do and how it should be interacted with. They think how elements of the product are manipulated in order to perform some task. This all together is called product concept.</p>

<h1>Mental model</h1>

<p>Starting with definiton, following with example.
<blockquote><p>A mental model represents a person’s thought process for how something works (i.e., a person’s understanding of the surrounding world). Mental models are based on incomplete facts, past experiences, and even intuitive perceptions. They help shape actions and behavior, influence what people pay attention to in complicated situations, and define how people approach and solve problems.</p><footer><strong>Susan Carey</strong> <cite>Cognitive Science and Science Education</cite></footer></blockquote></p>

<p>Definition of mental model is rather simple, but it can be even simpler given concrete example. Let&rsquo;s say that I tell you that I&rsquo;ve made scrambled eggs. Based on that information you probably can think of the process of making scrambled eggs. Based on your own kitchen experiences you know that I had to take eggs from the fridge, put some butter on the pan then break eggs and stir a little bit so it will not stick to the pan. Instead of butter you might think about olive oil or something else. The most important thing in that example is that you have some model, some expectations, some thought process about cooking scrambled eggs. You don&rsquo;t have complete information so you have some assumptions &ndash; maybe even more of them than I described if you like fancy eggs. That mental image of the process is what we call mental model.</p>

<p>Conceptual model can be derived from product concept. Conceptual model is the actual thing given to the user. It is what has been designed and then produced and showed to the user. Now that we know about two models we can discuss how these two relate to each other.</p>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>Sometimes users are just used to poor experience and do not expect anything much better. Their expectations will not rise to the completely different level. Henry Ford knows something about it.</p>

<p><blockquote><p>If I had asked people what they wanted, they would have said faster horses.</p><footer><strong>Henry Ford</strong></footer></blockquote></p>

<p>Users of means of transport had mental model of using horses. For them, a better product would be stagecoach with more horses. They would not think of something like a car, but designer had. New product which was outside of user&rsquo;s mental model changed its users. That&rsquo;s why design should not always be about going exactly for the mental model of its users because users do not know what is good for them until they see a next best thing.</p>

<p>On the other hand sometimes mental image can be just too strong and changing it seems impossible. I know at least one example from real world.</p>

<h1>Mental model of Windows user</h1>

<p>Windows 8 introduced change to the start button &ndash; it has been removed. Windows users have mental model of using it. Everyone know Start button.</p>

<p>In this example we can see older Windows user who has mental model about the start button. End result? Take a look.</p>

<iframe width="560" height="315" src="http://mklew.github.io//www.youtube.com/embed/v4boTbv9_nU" frameborder="0" allowfullscreen></iframe>


<p>Video shows how strong and deeply rooted in one&rsquo;s brain mental models can be. Dramatic change to the product might cause trouble to some portion of users who will not be able to breach to gap between their mental model and conceptual model.</p>

<h2>What can be done about it?</h2>

<p>Such sudden change in the product is not a good idea without proper transition process. I could think of some introductory videos or maybe quick interactive tutorial like in games. When Google changed gmail then there was some help and tips about what changed first time you logged into it. There was information about what is new and how to do what. It looks like a very good approach to the problem. I think of myself as be more of advanced user so I could probably adjust my mental model on my own but having a quick overview of the changes presented nicely was a pleasent experience.</p>

<h1>Summary</h1>

<p>Mental model of the user is important but let&rsquo;s not get crazy about it. There is no single truth about what designers should and should not do. In some cases sudden shift might work and in others it might not. One thing to remember &ndash; you should know what is the mental model of you users. Based on that knowledge you should design your product to either meet that model or plan how to change it so it satisfies your product&rsquo;s conceptual model.</p>
]]></content>
  </entry>
  
</feed>
